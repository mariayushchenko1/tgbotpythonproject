from telegram import Update, ReplyKeyboardMarkup # –±–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã telegram API
from telegram.ext import (
    Application, # –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
    MessageHandler, # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    filters, # —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    ContextTypes, # —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    CallbackContext # –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
)
import sqlite3 #–ë–î

# —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_NAME = "mood.db"

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
main_kb = ReplyKeyboardMarkup(
    [["1", "2", "3"], ["4", "5", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"], ["–ù–∞–∑–∞–¥"]],
    resize_keyboard=True
)

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–∫—Ç–æ—Ä–∞ –≤–ª–∏—è–Ω–∏—è
factor_kb = ReplyKeyboardMarkup(
    [["–î—Ä—É–∑—å—è", "–°–µ–º—å—è"], ["–†–∞–±–æ—Ç–∞", "–£—á–µ–±–∞"], ["–ó–¥–æ—Ä–æ–≤—å–µ", "–î—Ä—É–≥–æ–µ"], ["–ù–∞–∑–∞–¥"]],
    resize_keyboard=True
)

# —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect(DB_NAME) # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    cursor = conn.cursor() # —Å–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS moods (
            user_id INTEGER,
            rating INTEGER,
            factor TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    """)
    conn.commit() # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    conn.close() # –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

# –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞
# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–µ–∫–µ—Ä–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
# –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
async def start_mood(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:", reply_markup=main_kb)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ—Ü–µ–Ω–∫–∏
async def process_rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    if text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        return await show_stats(update, context) # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–∫–∞–∑—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if text == "–ù–∞–∑–∞–¥":
        return await start(update, context) # –í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—á–∞–ª–æ

    if text in ["1", "2", "3", "4", "5"]:
        context.user_data['rating'] = int(text) # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        await update.message.reply_text("–ß—Ç–æ –ø–æ–≤–ª–∏—è–ª–æ?", reply_markup=factor_kb) # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ñ–∞–∫—Ç–æ—Ä–æ–≤

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
async def process_factor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "–ù–∞–∑–∞–¥":
        return await start_mood(update, context)

# –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Ü–µ–Ω–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    if 'rating' not in context.user_data:
        return await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞", reply_markup=main_kb)

# –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    user_id = update.effective_user.id # id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    rating = context.user_data['rating'] # –æ—Ü–µ–Ω–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    factor = text # —Ñ–∞–∫—Ç–æ—Ä

# —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO moods (user_id, rating, factor) VALUES (?, ?, ?)",
        (user_id, rating, factor)
    )
    conn.commit() # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    conn.close() # –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

# –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(
        f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {rating}",
        reply_markup=main_kb
    )
    context.user_data.clear() # –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

# —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
async def show_stats(update: Update, context: CallbackContext):
    user_id = update.effective_user.id

# –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

# –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π –æ—Ü–µ–Ω–∫–∏
    cursor.execute("SELECT AVG(rating) FROM moods WHERE user_id = ?", (user_id,))
    avg = cursor.fetchone()[0]

# –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–∞–º–æ–≥–æ —á–∞—Å—Ç–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞
    cursor.execute("""
        SELECT factor, COUNT(*) as count 
        FROM moods 
        WHERE user_id = ? 
        GROUP BY factor 
        ORDER BY count DESC 
        LIMIT 1
    """, (user_id,))
    result = cursor.fetchone()
    conn.close() # –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

# —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if avg is None:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", reply_markup=main_kb)
    else:
        message = (
            "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {round(avg, 2)}\n"
            f"‚Ä¢ –°–∞–º—ã–π —á–∞—Å—Ç—ã–π —Ñ–∞–∫—Ç–æ—Ä: {result[0] if result else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}"
        )
        await update.message.reply_text(message, reply_markup=main_kb)

# –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
def setup(application):
    init_db() # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.Regex("^–¢—Ä–µ–∫–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è$"), start_mood))
    application.add_handler(MessageHandler(filters.Regex("^([1-5]|–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)$"), process_rating))
    application.add_handler(
        MessageHandler(filters.Regex("^(–î—Ä—É–∑—å—è|–°–µ–º—å—è|–†–∞–±–æ—Ç–∞|–£—á–µ–±–∞|–ó–¥–æ—Ä–æ–≤—å–µ|–î—Ä—É–≥–æ–µ)$"), process_factor))