from telegram import Update, ReplyKeyboardMarkup # –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞
from telegram.ext import ( # —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è
    Application,
    MessageHandler,
    filters,
    ContextTypes,
    JobQueue,
    CallbackContext
)
from datetime import datetime, timedelta # –¥–ª—è –¥–∞—Ç (–≤—ã–±–æ—Ä –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏)
import logging # –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –∏ –∏—Ö "–∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    MessageHandler,
    CommandHandler,
    filters,
    ContextTypes,
    CallbackContext  # –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
)

# –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –•–¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–º –æ—Å—Ç–∞–≤–∏—Ç
user_data = {}



class WorkoutData:
    def __init__(self):
        self.selected_days = []  # –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–Ω–∏
        self.completed = {}  # –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ True\False)
        self.reminder_jobs = []  # —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π


# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_keyboard(buttons):
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)


DAYS_KEYBOARD = get_keyboard([["–ü–Ω", "–í—Ç", "–°—Ä"], ["–ß—Ç", "–ü—Ç", "–°–±"], ["–í—Å", "–ì–æ—Ç–æ–≤–æ"]]) # –æ—Å–Ω–æ–≤–Ω–∞—è
YES_NO_KEYBOARD = get_keyboard([["–î–∞", "–ù–µ—Ç"]]) # –ø–æ—Å–ª–µ –≤–æ–ø—Ä–æ—Å–∞
MAIN_KEYBOARD = get_keyboard([["–ù–∞–∑–∞–¥", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]]) # –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π


# –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º –¥–Ω–∏ –≤ —á–∏—Å–ª–∞
def day_to_num(day):
    days = {"–ø–Ω": 0, "–≤—Ç": 1, "—Å—Ä": 2, "—á—Ç": 3, "–ø—Ç": 4, "—Å–±": 5, "–≤—Å": 6}
    return days.get(day.lower(), 0)


# —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
async def start_workout(update: Update, context: ContextTypes.DEFAULT_TYPE): # –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏–Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∑–∞—Ä—è–¥–∫–∞ –≤ –ì–ú
    user_id = update.effective_user.id # —É–∑–Ω–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[user_id] = WorkoutData() # —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –µ–≥–æ –¥–∞–Ω–Ω—ã—Ö

    await update.message.reply_text( # –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ. –ë–æ—Ç –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Å–æ–æ
        "–í—ã–±–µ—Ä–∏ –¥–Ω–∏ –¥–ª—è –∑–∞—Ä—è–¥–∫–∏:",
        reply_markup=DAYS_KEYBOARD # ReplyKeyboardMarkup. –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫ —Å–æ–æ
    )


# –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–Ω–µ–π
async def process_days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.lower()

    if text == "–≥–æ—Ç–æ–≤–æ":
        if not user_data[user_id].selected_days:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–µ–Ω—å!")
            return # –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, —Ç–æ –≤–æ–∑–≤—Ä–∞—Ç, –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º

        await update.message.reply_text( # –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º —Å–æ–æ + –æ—Ç–≤–µ—Ç—Ç–Ω–æ–µ —Å–æ–æ
            f"–¢—ã –≤—ã–±—Ä–∞–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤: {', '.join(user_data[user_id].selected_days)}",
            reply_markup=MAIN_KEYBOARD
        )

        # —Å–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        schedule_reminders(user_id, context)

    elif text in ["–ø–Ω", "–≤—Ç", "—Å—Ä", "—á—Ç", "–ø—Ç", "—Å–±", "–≤—Å"]:
        if text not in user_data[user_id].selected_days:
            user_data[user_id].selected_days.append(text)
            await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω {text}") # –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–Ω—è–º–∏


# –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
def schedule_reminders(user_id: int, context: CallbackContext):
    user = user_data[user_id] # –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–ª–∏ –ø–µ—Ä–µ–º

    # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏
    for job in user.reminder_jobs:
        job.schedule_removal()
    user.reminder_jobs = []

    # —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏
    for day in user.selected_days:
        # –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞–∫–∞–Ω—É–Ω–µ - –≤ 20:00
        job = context.job_queue.run_daily( # –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞–∂–¥ –¥–µ–Ω—å –≤ –æ–ø—Ä –≤—Ä–µ–º—è
            send_reminder,
            time=datetime.strptime("20:00", "%H:%M").time(), # strptime –ø–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤–æ –æ–±—ä–µ–∫—Ç –≤—Ä–µ–º
            days=(day_to_num(day),),
            context=user_id # –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        )
        user.reminder_jobs.append(job)


# –æ—Ç–ø—Ä–∞–≤–¥—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_reminder(context: CallbackContext):
    user_id = context.job.context
    await context.bot.send_message(
        user_id,
        "–ó–∞–≤—Ç—Ä–∞ –¥–µ–Ω—å –∑–∞—Ä—è–¥–∫–∏! –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Å—è –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!"
    )


# –≤–æ–ø—Ä–æ—Å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞—Ä—è–¥–∫–∏
async def ask_workout_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–¢—ã —Å–¥–µ–ª–∞–ª —Å–µ–≥–æ–¥–Ω—è –∑–∞—Ä—è–¥–∫—É?",
        reply_markup=YES_NO_KEYBOARD
    )


# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
async def process_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    today = datetime.now().strftime("%Y-%m-%d")
    answer = update.message.text.lower()

    user_data[user_id].completed[today] = (answer == "–¥–∞")

    await update.message.reply_text(
        "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!" if answer == "–¥–∞" else "üòä –ó–∞–≤—Ç—Ä–∞ –ø–æ–ª—É—á–∏—Ç—Å—è –ª—É—á—à–µ!",
        reply_markup=MAIN_KEYBOARD
    )


async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    user_id = update.effective_user.id
    if user_id not in user_data or not user_data[user_id].completed:
        await update.message.reply_text("–£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!")
        return

    user = user_data[user_id]
    total = len(user.completed)
    done = sum(user.completed.values())
    missed = total - done

    stats = (
        "üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –¥–Ω–µ–π: {total}\n"
        f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {done}\n"
        f"‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {missed}\n\n"
        f"{'üî• –ò–¥–µ–∞–ª—å–Ω–æ!' if done == total else 'üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π —Ä–∞–±–æ—Ç–∞—Ç—å!'}"
    )

    await update.message.reply_text(stats)


def get_handlers():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    return [
        MessageHandler(filters.Text(["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å", "–ì–æ—Ç–æ–≤–æ"]), process_days),
        MessageHandler(filters.Text(["–î–∞", "–ù–µ—Ç"]), process_answer),
        MessageHandler(filters.Text(["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]), show_stats),
    ]


async def test_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    user_id = update.effective_user.id
    # –°–æ–∑–¥–∞–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    fake_context = CallbackContext.from_update(update, context)
    fake_context.job.context = user_id  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º user_id –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    await send_reminder(fake_context)
    await update.message.reply_text("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

